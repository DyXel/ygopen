/*
 * Copyright (c) 2024, Dylam De La Torre <dyxel04@gmail.com>
 *
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
syntax = "proto3";

// TODO: Documentation

package YGOpen.Proto.Room;

import "banlist.proto";
import "deck.proto";
import "user.proto";

option cc_enable_arenas = true;

enum State
{
	// Transitive state, when the room is being constructed or closing.
	STATE_HOSTING_CLOSING = 0;
	// Main "Idle" state, where duelists can ready up and where the host can
	// change settings among other things.
	STATE_CONFIGURING = 1;
}

message Duelist
{
	uint32 team   = 1;
	uint32 pos    = 2;
	User user     = 3;
	bool is_host  = 4;
	bool is_ready = 5;
}

message Options
{
	// Minimum 1 duelist per team, must have exactly 2 values (one for each
	// team). Values are clamped to minimum and implementation-defined maximum.
	repeated uint32 max_duelists = 1;

	DeckLimits deck_limits       = 2;

	oneof banlist
	{
		string banlist_id        = 3;
		Banlist custom_banlist   = 4;
	}

	// TODO: Duel options
}

message Event
{
	message Configuring
	{
		message EnteringState
		{
			Options options           = 1;
			repeated Duelist duelists = 2;
			uint32 spectator_count    = 3;
			// TODO: Send room settings (don't remember what this means)
		}

		message DeckStatus
		{
			DeckError deck_error = 1;
		}

		oneof t
		{
			EnteringState entering_state = 1;
			Duelist duelist_enters       = 2;
			Duelist update_duelist       = 3;
			DeckStatus deck_status       = 4;
		}
	}

	oneof t
	{
		Configuring configuring = 1;
		uint32 spectator_count  = 2;
	}
}

message Signal
{
	message Configuring
	{
		oneof t
		{
			Deck update_deck  = 1;
			bool ready_status = 2;
		}
	}

	oneof t
	{
		Configuring configuring = 1;
	}
}
