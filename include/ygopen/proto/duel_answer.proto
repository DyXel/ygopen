/*
 * Copyright (c) 2021, Dylam De La Torre <dyxel04@gmail.com>
 *
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */
syntax = "proto3";

// TODO: Documentation.

package YGOpen.Proto.Duel;

import "duel_data.proto";

option cc_enable_arenas = true;
option optimize_for = LITE_RUNTIME;

message Answer
{
	message SelectCard
	{
		// TODO
	}

	message SelectIdle
	{
		enum Action
		{
			ACTION_ACTIVATE   = 0;
			ACTION_SUMMON     = 1;
			ACTION_SPSUMMON   = 2;
			ACTION_REPOSITION = 3;
			ACTION_MSET       = 4;
			ACTION_SSET       = 5;
			ACTION_ATTACK     = 6;
			ACTION_SHUFFLE    = 7;
			ACTION_PHASE      = 8;
		}

		message CardAction
		{
			// Any of the previously defined actions except shuffle or phase.
			Action action = 1;
			// Corresponds to the index the chosen card had on its respective
			// repeated field in the SelectIdle request message.
			uint32 index = 2;
		}

		oneof t
		{
			// Perform hand shuffling.
			bool shuffle           = 1;
			// Attempt to go to the selected phase.
			uint32 phase           = 2;
			// Perform an action on a card.
			CardAction card_action = 3;
		}
	}

	message SelectToChain
	{
		oneof t
		{
			// Don't chain anything. Invalid if forced is true.
			bool no_op   = 1;
			// Corresponds to the index the request message had for its repeated
			// field.
			uint32 index = 2;
		}
	}

	message SelectZone
	{
		repeated Place places = 1;
	}

	message Sort
	{
		// TODO
	}

	oneof t
	{
		// Selected attribute or attributes OR'd together.
		uint32 select_attribute          = 1;
		// TODO
		SelectCard select_card           = 2;
		// Selected card code.
		uint32 select_card_code          = 3;
		// Index of selected option/effect.
		uint32 select_effect             = 4;
		// Shuffle action, value of phase or "actioned" card.
		SelectIdle select_idle           = 5;
		// Index of selected number.
		uint32 select_number             = 6;
		// Selected position or positions OR'd together.
		uint32 select_position           = 7;
		// Selected race or races OR'd together.
		uint64 select_race               = 8;
		// Self-explanatory.
		int32 select_rock_paper_scissors = 9;
		// TODO
		SelectToChain select_to_chain    = 10;
		// Self-explanatory.
		bool select_yes_no               = 11;
		// TODO
		SelectZone select_zone           = 12;
		// TODO
		Sort sort                        = 13;
	}
}
